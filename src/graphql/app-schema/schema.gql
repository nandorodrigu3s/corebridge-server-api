type NFTCollection {
  created_date: DateTime!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Price {
  label: String!
  value: Float!
}

type NFTData {
  id: Int!
  num_sales: Int!
  category: String!
  image_url: String!
  name: String!
  description: String!
  external_link: String!
  permalink: String!
  token_id: String!
  collection: NFTCollection!
  price: Price
}

type User {
  firstName: String!
  lastName: String!
  countAssets: Int
  wallet: [NFTData!]
}

type AuthData {
  token: String!
  user: User!
}

type Cart {
  """Uma lista de NFTs adicionados ao carrinho"""
  nfts: [NFTData]!
}

type Order {
  orderId: String!
  nfts: [NFTData!]!
  status: OrderStatusType!
  totalPayment: Price!
  discount: Price
  canceledAt: DateTime
}

enum OrderStatusType {
  COMPLETE
  PENDING
  CANCELED
  FAILED
}

type Query {
  getByUsername(username: String!): User
  getUser: User
  getCart: Cart
}

type Mutation {
  login(authInput: Auth!): AuthData
  createUser(createUserInput: CreateUserInput!): User
  createCart(createCartInput: CreateCartInput!): Cart
  updateCart(updateCartInput: UpdateCartInput!): Cart
  deleteCart: Boolean!
  createOrder(createOrderInput: CreateOrderInput!): Order
}

input Auth {
  username: String!
  password: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  username: String!
  password: String!
}

input CreateCartInput {
  """Uma lista de NFTs para serem adicionadas ao carrinho"""
  nfts: [NFTDataInput]!
}

input NFTDataInput {
  id: Int!
  num_sales: Int!
  category: String!
  image_url: String!
  name: String!
  description: String!
  external_link: String!
  permalink: String!
  collection: NFTCollectionInput!
  token_id: String!
  price: PriceInput!
}

input NFTCollectionInput {
  created_date: DateTime!
  name: String!
}

input PriceInput {
  label: String!
  value: Float!
}

input UpdateCartInput {
  """Um NFT para ser atualizado no carrinho"""
  nft: NFTDataInput
  type: UpdateCartType!
}

enum UpdateCartType {
  ADD
  REMOVE
}

input CreateOrderInput {
  nfts: [NFTDataInput!]!
  totalPayment: PriceInput!
  discount: PriceInput
}